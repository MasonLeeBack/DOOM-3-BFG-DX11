/*
===========================================================================

Doom 3 BFG Edition GPL Source Code
Copyright (C) 1993-2012 id Software LLC, a ZeniMax Media company. 

This file is part of the Doom 3 BFG Edition GPL Source Code ("Doom 3 BFG Edition Source Code").  

Doom 3 BFG Edition Source Code is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Doom 3 BFG Edition Source Code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Doom 3 BFG Edition Source Code.  If not, see <http://www.gnu.org/licenses/>.

In addition, the Doom 3 BFG Edition Source Code is also subject to certain additional terms. You should have received a copy of these additional terms immediately following the terms and conditions of the GNU General Public License which accompanied the Doom 3 BFG Edition Source Code.  If not, please request a copy in writing from id Software at the address below.

If you have questions concerning this license or the applicable additional terms, you may contact in writing id Software LLC, c/o ZeniMax Media Inc., Suite 120, Rockville, Maryland 20850 USA.

===========================================================================
*/

#include "global.inc"

uniform SamplerState samp0 : register(s0); // texture 1 is the per-surface bump map
uniform SamplerState samp1 : register(s1); // texture 4 is the per-surface diffuse map
uniform SamplerState samp2 : register(s2); // texture 5 is the per-surface specular map

uniform Texture2D tex0 : register(t0);
uniform Texture2D tex1 : register(t1);
uniform Texture2D tex2 : register(t2);

struct PS_IN {
	float4 position	: SV_Position;
	float4 texcoord0	: TEXCOORD0;
	float4 texcoord1	: TEXCOORD1;
	float4 texcoord2	: TEXCOORD2;
	float4 color		: COLOR0;
};

struct PS_OUT {
	float4 color : SV_TARGET;
};

void main( PS_IN fragment, out PS_OUT result ) {
	float4 bumpMap =			tex0.Sample( samp0, fragment.texcoord0.xy );
	float4 YCoCG =			    tex1.Sample( samp1, fragment.texcoord1.xy );
	float4 specMap =			tex2.Sample( samp2, fragment.texcoord2.xy );

	float3 diffuseMap = ConvertYCoCgToRGB( YCoCG );

	float3 localNormal;
	localNormal.xy = bumpMap.wy - 0.5;
	localNormal.z = sqrt( abs( dot( localNormal.xy, localNormal.xy ) - 0.25 ) );
	localNormal = normalize( localNormal );

	float3 diffuseColor = diffuseMap * rpDiffuseModifier.xyz;
	//float3 specularColor = specMap.xyz * specularContribution * rpSpecularModifier.xyz;

	//result.color.xyz = ( diffuseColor + specularColor ) * lightColor * fragment.color.xyz;
	result.color.xyz = diffuseColor * fragment.color.xyz;
	result.color.w = 1.0;
}
